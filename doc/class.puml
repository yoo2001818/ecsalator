@startuml

hide empty fields
hide empty methods

package core {

  interface Action {
    type: String
    payload: Object
    meta: Object
  }

  interface JSON
  interface JSONable {
    toJSON(): JSON
  }
  Action --|> JSON
  JSON --|> JSONable

  interface Function {
  }

  interface EventEmitter {
    emit(event, ...args)
    on(event, listener)
    once(event, listener)
    removeAllListeners(event)
    removeListener(event, listener)
  }

  interface Middleware {
    next: Function
    store: Store
    action: Action
  }
  Middleware --|> Function

  interface System {
    onMount()
    onUnmount()
    handle(action)
  }

  class StateManager {
    queue: Array<Event>
    push(event)
    unshift(event)
    -shift(event)
    commit()
  }
  StateManager --|> EventEmitter

  interface Controller {
    onMount()
    onUnmount()
  }

  interface State {
    {static} fromJSON(json): State
  }
  State --|> JSONable

  class Store {
    actions: EventEmitter
    changes: StateManager
    state: State
    systems: {System}
    controllers: {Controller}
    dispatch(action)
    -handleAction(action)
    -handleChange(event)
  }
  Middleware --o Store
  StateManager --* Store
  System --* Store
  State --* Store
  Controller --* Store

  class StoreFactory {
    setState(state)
    addController(name, controller)
    addSystem(name, system)
  }

}

package ECS {
  class ECS.State {
    create(entity)
    remove(entity)
  }
  ECS.State ---|> State
  ECS.State --|> EventEmitter

  interface Component {
    toJSON()
    {static} fromJSON(json)
  }
  Component --* ECS.State

  class BitSet {
  }

  class Entity {
    get(key)
    add(key, options)
    remove(key)
  }
  Entity --* ECS.State
  Component --o Entity
  Entity --|> EventEmitter
  BitSet --* Entity

  class Family {
    get()
    dispose()
  }
  Family --* ECS.State
  BitSet --* Family

  class ECSController {
  }
  ECSController --|> Controller

}

@enduml
